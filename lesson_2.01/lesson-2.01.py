"""
Домашнее задание № 2.01
"Вводное занятие. Библиотека NumPy"
по курсу Цифровых кафедр "Python: от основ до машинного обучения" 

Выполнил: студент группы № 5040103/30401
Курчуков Максим
"""
import sys

import numpy as np
import array


def task_1() -> None:
    """1. Какие еще существуют коды типов?"""
    print(
        """
        1. Существуют следующие обозначения:
        Код - Тип данных C - Минимальный размер в байтах
        'b' - signed char - 1
        'B' - unsigned char - 1
        'u' - wchar_t - 2
        'w' - Py_UCS4 - 4
        'h' - signed short - 2
        'H' - unsigned short - 2
        'i' - signed int - 2
        'I' - unsigned int - 2
        'l' - signed long - 4
        'L' - unsigned long - 4
        'q' - signed long long - 8
        'Q' - unsigned long long - 8
        'f' - float - 4
        'd' - double - 8
        """
    )


def task_2() -> None:
    """2. Напишите код, подобный приведенному выше, но с другим типом"""
    a2_1 = array.array("i", [1, 2, 3])
    a2_2 = array.array("f", [0.1, 0.2, 0.3])
    a2_3 = array.array("d", [0.1, 0.2, 0.3])
    print(f"2. {sys.getsizeof(a2_1) = }, {type(a2_1) = }")
    print(f"2. {sys.getsizeof(a2_2) = }, {type(a2_2) = }")
    print(f"2. {sys.getsizeof(a2_3) = }, {type(a2_3) = }")


def task_3() -> None:
    """3. Напишите код для создания массива с 5 значениями, располагающимися через равные интервалы в диапазоне от 0 до 1"""
    a3 = np.linspace(0, 1, 5)
    print(f"3. Равные интервалы: {a3 = }")


def task_4() -> None:
    """4. Напишите код для создания массива с 5 равномерно распределенными случайными значениями в диапазоне от 0 до 1"""
    a4 = np.random.rand(5)
    print(f"4. Равномерно распределенные значения: {a4 = }")


def task_5() -> None:
    """5. Напишите код для создания массива с 5 нормально распределенными случайными значениями с мат. ожиданием = 0 и дисперсией 1"""
    a5 = np.random.randn(5)
    print(f"5. Нормально распределенные значения: {a5 = }")


def task_6() -> None:
    """6. Напишите код для создания массива с 5 случайнвми целыми числами в от [0, 10)"""
    a6 = np.random.randint(0, 10, 5)
    print(f"6. Случайные целые числа: {a6 = }")


def task_7() -> None:
    """
    7. Написать код для создания срезов массива 3 на 4
    - первые две строки и три столбца
    - первые три строки и второй столбец
    - все строки и столбцы в обратном порядке
    - второй столбец
    - третья строка
    """
    a7 = np.arange(12).reshape(3, 4)
    print(f"7. Массив 3x4:\n{a7}")

    slice_1 = a7[:2, :3]
    print(f"7. первые две строки и три столбца:\n{slice_1}")

    slice_2 = a7[:3, 1]
    print(f"7. первые три строки и второй столбец:\n{slice_2}")

    slice_3 = a7[::-1, ::-1]
    print(f"7. все строки и столбцы в обратном порядке:\n{slice_3}")

    slice_4 = a7[:, 1]
    print(f"7. второй столбец:\n{slice_4}")

    slice_5 = a7[2, :]
    print(f"7. третья строка:\n{slice_5}")


def task_8() -> None:
    """8. Продемонстрируйте, как сделать срез-копию"""
    a8_1 = np.array([1, 2, 3, 4, 5])
    a8_2 = a8_1[1:4].copy()
    print(f"8. Оригинальный массив: {a8_1}")
    print(f"8. Срез-копия: {a8_2}")


def task_9() -> None:
    """9. Продемонстрируйте использование newaxis для получения вектора-столбца и вектора-строки"""
    a9 = np.array([1, 2, 3])
    a9_row = a9[np.newaxis, :]
    a9_col = a9[:, np.newaxis]
    print(f"9. Вектор-строка:\n{a9_row}")
    print(f"9. Вектор-столбец:\n{a9_col}")


def task_10() -> None:
    """10. Разберитесь, как работает метод dstack"""
    a10_1 = np.array([1, 2, 3])
    a10_2 = np.array([4, 5, 6])
    a10_3 = np.dstack((a10_1, a10_2))
    print(f"10. Результат dstack:\n{a10_3}")


def task_11() -> None:
    """11. Разберитесь, как работают методы split, vsplit, hsplit, dsplit"""
    a11_1 = np.arange(9).reshape(3, 3)
    print(f"11. Исходный массив:\n{a11_1}")

    a11_2 = np.split(a11_1, 3)
    print(f"11. Результат split:\n{a11_2}")

    a11_3 = np.vsplit(a11_1, 3)
    print(f"11. Результат vsplit:\n{a11_3}")

    a11_4 = np.hsplit(a11_1, 3)
    print(f"11. Результат hsplit:\n{a11_4}")

    a11_5 = np.arange(16).reshape(2, 2, 4)
    a11_6 = np.dsplit(a11_5, 2)
    print(f"11. Результат dsplit:\n{a11_6}")


def task_12() -> None:
    """12. Привести пример использования всех универсальных функций, которые я привел"""
    a12 = np.array([1, 2, 3, 4, 5])
    print(f"12. Исходный массив: {a12}")

    a12_1 = - a12
    print(f"12. Результат - (унитарный): {a12_1}")

    a12_2 = a12 + 10
    print(f"12. Результат +: {a12_2}")

    a12_3 = a12 - 3
    print(f"12. Результат -: {a12_3}")

    a12_4 = a12 * 2
    print(f"12. Результат *: {a12_4}")

    a12_5 = a12 / 2
    print(f"12. Результат /: {a12_5}")

    a12_6 = a12 // 2
    print(f"12. Результат //: {a12_6}")

    a12_7 = a12 ** 2
    print(f"12. Результат **: {a12_7}")

    a12_8 = a12 % 2
    print(f"12. Результат %: {a12_8}")

    a12_9 = np.sin(a12)
    print(f"12. Результат sin: {a12_9}")

    a12_10 = np.cos(a12)
    print(f"12. Результат cos: {a12_10}")

    a12_11 = np.tan(a12)
    print(f"12. Результат tan: {a12_11}")

    a12_12 = np.exp(a12)
    print(f"12. Результат exp: {a12_12}")

    a12_13 = np.log(a12)
    print(f"12. Результат log: {a12_13}")


def main() -> None:
    task_1()
    task_2()
    task_3()
    task_4()
    task_5()
    task_6()
    task_7()
    task_8()
    task_9()
    task_10()
    task_11()
    task_12()


if __name__ == "__main__":
    main()
